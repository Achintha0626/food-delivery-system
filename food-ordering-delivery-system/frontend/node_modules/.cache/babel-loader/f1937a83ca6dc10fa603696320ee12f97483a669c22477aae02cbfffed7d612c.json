{"ast":null,"code":"import axios from \"axios\";\n\n// Setup Axios instance\nconst api = axios.create({\n  baseURL: \"http://localhost:5000\",\n  // API Gateway URL\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Interceptor to add JWT token to each request (if available)\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem(\"x-auth-token\");\n  if (token) {\n    // Attach token to request headers\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Interceptor to handle response errors globally\napi.interceptors.response.use(response => response,\n// Return the response if successful\nerror => {\n  if (error.response && error.response.status === 401) {\n    // Handle 401 Unauthorized error (e.g., token expired)\n    alert(\"Session expired. Please log in again.\");\n    localStorage.removeItem(\"x-auth-token\"); // Remove invalid token\n    // Redirect to login page or perform any other necessary actions\n  }\n  return Promise.reject(error); // Reject the promise to propagate the error\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","alert","removeItem"],"sources":["D:/food-ordering-delivery-system/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Setup Axios instance\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000\", // API Gateway URL\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Interceptor to add JWT token to each request (if available)\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Get token from localStorage\r\n    const token = localStorage.getItem(\"x-auth-token\");\r\n    if (token) {\r\n      // Attach token to request headers\r\n      config.headers[\"x-auth-token\"] = token;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Interceptor to handle response errors globally\r\napi.interceptors.response.use(\r\n  (response) => response, // Return the response if successful\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Handle 401 Unauthorized error (e.g., token expired)\r\n      alert(\"Session expired. Please log in again.\");\r\n      localStorage.removeItem(\"x-auth-token\"); // Remove invalid token\r\n      // Redirect to login page or perform any other necessary actions\r\n    }\r\n    return Promise.reject(error); // Reject the promise to propagate the error\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACT;IACAD,MAAM,CAACJ,OAAO,CAAC,cAAc,CAAC,GAAGK,KAAK;EACxC;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ;AAAE;AACvBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAC,KAAK,CAAC,uCAAuC,CAAC;IAC9CP,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;IACzC;EACF;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAChC,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}